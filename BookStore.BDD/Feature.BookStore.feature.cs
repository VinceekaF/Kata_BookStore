// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BookStore.BDD
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class FeatureFeature : Xunit.IClassFixture<FeatureFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Feature.BookStore.feature"
#line hidden
        
        public FeatureFeature(FeatureFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Feature", "\tIn order to order a book\r\n\tAs a customer\r\n\tI want to buy a book and have it conf" +
                    "irmed", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Show books when a visitor arrive")]
        [Xunit.TraitAttribute("FeatureTitle", "Feature")]
        [Xunit.TraitAttribute("Description", "Show books when a visitor arrive")]
        [Xunit.InlineDataAttribute("5", new string[0])]
        public virtual void ShowBooksWhenAVisitorArrive(string number, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Show books when a visitor arrive", null, exampleTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 testRunner.When("I open the web site", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then(string.Format("The page must show me the correct books {0}", number), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Each time a customer add a book, it must be added in the cart")]
        [Xunit.TraitAttribute("FeatureTitle", "Feature")]
        [Xunit.TraitAttribute("Description", "Each time a customer add a book, it must be added in the cart")]
        [Xunit.InlineDataAttribute("3. Harry Potter et le prisonnier d\'Azkaban", new string[0])]
        [Xunit.InlineDataAttribute("5. Harry Potter et le prince de sang-mêlé", new string[0])]
        public virtual void EachTimeACustomerAddABookItMustBeAddedInTheCart(string title, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Each time a customer add a book, it must be added in the cart", null, exampleTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 14
 testRunner.When(string.Format("I add a book by its {0}", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
 testRunner.Then("in my cart I must see the book", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Computing the cart total price with discount")]
        [Xunit.TraitAttribute("FeatureTitle", "Feature")]
        [Xunit.TraitAttribute("Description", "Computing the cart total price with discount")]
        [Xunit.InlineDataAttribute("5", "3", "4", "2", "1", "100.4", new string[0])]
        [Xunit.InlineDataAttribute("2", "0", "2", "0", "1", "36.8", new string[0])]
        [Xunit.InlineDataAttribute("0", "5", "5", "3", "1", "99.2", new string[0])]
        public virtual void ComputingTheCartTotalPriceWithDiscount(string book1, string book2, string book3, string book4, string book5, string price, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Computing the cart total price with discount", null, exampleTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 22
 testRunner.When(string.Format("I add {0}, {1}, {2}, {3}, {4}", book1, book2, book3, book4, book5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then(string.Format("I have to see the total {0} with discount applied", price), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FeatureFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FeatureFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
